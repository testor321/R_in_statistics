}
print(moving_average)
moving_average <- c()
MA <- 0
for (i in 1:length(AirPassengers)) {
MA <- MA + i
if ( i %% 10 == 0 ){
moving_average<-c(moving_average, mean(MA))
MA <- 0
}
}
print(moving_average)
moving_average <- c()
MA <- 0
for (i in 1:length(AirPassengers)) {
MA <- MA + AirPassengers[i]
if ( i %% 10 == 0 ){
moving_average<-c(moving_average, mean(MA))
MA <- 0
}
}
print(moving_average)
moving_average <- c()
MA <- 0
for (i in 1:length(AirPassengers)) {
MA <- MA + AirPassengers[i]
if ( i %% 10 == 0 ){
moving_average<-c(moving_average, mean(MA))
MA <- 0
}
}
print(moving_average)
if ( i %% 10 == 0 ){
moving_average<-c(moving_average, mean(MA))
MA <- c()
}
moving_average <- c()
MA <- c()
for (i in 1:length(AirPassengers)) {
MA <- c(MA,AirPassengers[i])
if ( i %% 10 == 0 ){
moving_average<-c(moving_average, mean(MA))
MA <- c()
}
}
print(moving_average)
# Для встроенных в R данных AirPassengers рассчитайте скользящее среднее с интервалом сглаживания равным 10.
# Напечатайте получившийся результат (первым значением в выводе должно быть среднее для элементов 1:10,
# во втором значении - среднее для элементов 2:11 и т.д., в последнем  - среднее для элементов 135 :144)
# Все полученные значения средних сохраните в переменную moving_average.
print(length(AirPassengers)-10)
moving_average <- c()
MA <- c()
for (i in 1:length(AirPassengers)) {
print(i)
MA <- c(MA,AirPassengers[i])
if ( i %% 10 == 0 ){
moving_average<-c(moving_average, mean(MA))
MA <- c()
}
}
print(moving_average)
moving_average <- c()
MA <- c()
for (i in 1:(length(AirPassengers)-9)) {
if ( i %% 10 == 0 ){
MA <- c(MA,AirPassengers[i],AirPassengers[i+1],AirPassengers[i+2],AirPassengers[i+3],AirPassengers[i+4],AirPassengers[i+5],AirPassengers[i+6],AirPassengers[i+7],AirPassengers[i+8],AirPassengers[i+9])
moving_average<-c(moving_average, mean(MA))
MA <- c()
}
}
print(i)
print(moving_average)
moving_average <- c()
MA <- c()
for (i in 1:(length(AirPassengers)-9)) {
if ( i %% 10 == 0 ){
MA <- c(AirPassengers[i],AirPassengers[i+1],AirPassengers[i+2],AirPassengers[i+3],AirPassengers[i+4],AirPassengers[i+5],AirPassengers[i+6],AirPassengers[i+7],AirPassengers[i+8],AirPassengers[i+9])
print(MA)
moving_average<-c(moving_average, mean(MA))
MA <- c()
}
}
print(moving_average)
for (i in 1:(length(AirPassengers)-9)) {
MA <- c(AirPassengers[i],AirPassengers[i+1],AirPassengers[i+2],AirPassengers[i+3],AirPassengers[i+4],AirPassengers[i+5],AirPassengers[i+6],AirPassengers[i+7],AirPassengers[i+8],AirPassengers[i+9])
print(MA)
moving_average<-c(moving_average, mean(MA))
MA <- c()
}
moving_average <- c()
MA <- c()
for (i in 1:(length(AirPassengers)-9)) {
MA <- c(AirPassengers[i],AirPassengers[i+1],AirPassengers[i+2],AirPassengers[i+3],AirPassengers[i+4],AirPassengers[i+5],AirPassengers[i+6],AirPassengers[i+7],AirPassengers[i+8],AirPassengers[i+9])
moving_average<-c(moving_average, mean(MA))
MA <- c()
}
print(moving_average)
AirP <- as.vector(AirPassengers)
moving_average  <- c()
for (i in 1:135) {moving_average [i] <- mean(AirP[i:(i+9)])}
print(moving_average)
AirP <- as.vector(AirPassengers)
moving_average  <- c()
for (i in 1:length(AirPassengers)-9)) {moving_average [i] <- mean(AirP[i:(i+9)])}
print(moving_average)
AirP <- as.vector(AirPassengers)
moving_average  <- c()
for (i in 1:length(AirPassengers)-9) {moving_average [i] <- mean(AirP[i:(i+9)])}
print(moving_average)
mtcars[mtcars$cyl != 3 & mtcars$mpg>20]
mtcars$cyl != 3
mtcars$mpg>20
mtcars$qsec[mtcars$cyl != 3 & mtcars$mpg>20]
mean(mtcars$qsec[mtcars$cyl != 3 & mtcars$mpg>20])
result <- mean(mtcars$qsec[mtcars$cyl != 3 & mtcars$mpg>20])
?aggregate
mean_hp_vs  <- aggregate(x = df$hp, by = list(df$vs), FUN = mean)
df  <- mtcars
mean_hp_vs  <- aggregate(x = df$hp, by = list(df$vs), FUN = mean)
mean_hp_vs
df$vs
list(df$vs)
str(mtcars)
&mtcars
?mtcars
colnames(mean_hp_vs)  <- c("VS", "Mean HP")
mean_hp_vs
aggregate(hp ~ vs + am, df, mean)
df$vs  <- factor(df$vs  , labels = c("V", "S"))
df$am  <- factor(df$am  , labels = c("Auto", "Manual"))
aggregate(hp ~ vs + am, df, mean)
aggregate(x = df[,-c(8,9)], by = list(df$am), FUN = median)
View(df)
View(df)
View(mtcars)
mtcars$new_var <- NULL
View(mtcars)
df$new_var <- NULL
View(df)
aggregate(df[,c(1,3)], by = list(df$am, df$vs), FUN = sd)
aggregate(df[,c(df$mpg,df$disp)], by = list(df$am, df$vs), FUN = sd)
aggregate(x = list(df$mpg,df$disp) , by = list(df$am, df$vs), FUN = sd)
aggregate(cbind(mpg, disp) ~ am + vs, df, sd)
my_stats  <- aggregate(cbind(mpg, disp) ~ am + vs, df, sd)
my_stats
descriptions_stat <- aggregate(cbind(hp, disp) ~ vs, df, mean)
descriptions_stat
descriptions_stat <- aggregate(cbind(hp, disp) ~ am, df, mean)
descriptions_stat
descriptions_stat <- aggregate(cbind(hp, disp) ~ am, mtcars, mean)
descriptions_stat
descriptions_stat <- aggregate(cbind(hp, disp) ~ am, mtcars, sd)
descriptions_stat
install.packages(c("psych", "ggplot2"))
library("ggplot2", lib.loc="d:/app/R/R-3.5.2/library")
library("psych", lib.loc="d:/app/R/R-3.5.2/library")
library(psych)
?describe
install.packages(c("assertthat", "blogdown", "callr", "class", "cli", "codetools", "colorspace", "e1071", "fs", "git2r", "glue", "highr", "httpuv", "knitr", "lazyeval", "Matrix", "mgcv", "openssl", "pkgbuild", "processx", "purrr", "Rcpp", "readxl", "rlang", "rmarkdown", "rstudioapi", "rticles", "stringi", "sys", "tibble", "tinytex"))
library(psych)
?describe
describe(x = df)
describe(x = mtcars)
describe(x = df)
descr  <- describe(x = df[,-c(8,9)])
descr2  <- describeBy(x = df[,-c(8,9)], group = df$vs)
descr2$V
descr2$S
descr2
View(df)
?describeBy
descr2  <- describeBy(x = df[,-c(8,9)], group = df$vs, mat = T )
descr2
descr2  <- describeBy(x = df[,-c(8,9)], group = df$vs, mat = T, digits = 1)
descr3  <- describeBy(x = df[,-c(8,9)], group = df$vs, mat = T, digits = 1, fast = T)
View(descr2)
View(descr3)
describeBy(df$qsec, group = list(df$vs, df$am), digits = 1, fast = T)
describeBy(df$qsec, group = list(df$vs, df$am), digits = 1, fast = T)
describeBy(df$qsec, group = list(df$vs, df$am), digits = 1, fast = T,  mat = T)
sum(is.na(df))
# check is NA exist in the data
# calculate amount of NA
is.na(df)
is.na(df$mpg)
result <- subset(airquality, Month%in%c(7,8,9)) result <- aggregate(Ozone ~ Month,df,length)
df <- subset(airquality, Month%in%c(7,8,9))
result <- aggregate(Ozone ~ Month,df,length
result
result
result <- aggregate(Ozone ~ Month, airquality, subset = Month %in% c(7,8,9), length)
result
library(dplyr)
?airquality
View(airquality)
describeBy(x = airquality, group = airquality$Month)
describeBy(x = airquality, group = airquality$Month, mat = T)
View(airquality)
?airquality
View(airquality)
describeBy(x = airquality, group = airquality$Month)
z <- subset(airquality,Month==8)
skew(z$Wind)
# Обратимся к встроенным данным iris. Соотнесите значения стандартного отклонения переменных.
describeBy(x = iris)
# Обратимся к встроенным данным iris. Соотнесите значения стандартного отклонения переменных.
describe(x = iris)
lapply(subset(iris, select = 1:4), FUN = sd)
sd(iris$Sepal.Length)
sd(iris$Sepal.Width)
sd(iris$Petal.Length)
sd(iris$Petal.Width)
# В данных iris расположите по убыванию значения медиан количественных переменных в группе virginica.
describe(x = iris)
# В данных iris расположите по убыванию значения медиан количественных переменных в группе virginica.
str(iris)
View(iris)
describeBy(x = iris, group = iris$Species)
describe(iris[iris$Species == 'virginica', 1:4])['median']
describe(iris[iris$Species == 'virginica', 1:4])['median']
describe(iris)['sd']
my_vector <- c(23 , 10 , 16 , 19 , 23 , 22 , 16 , 21 , 24 , 20 , 22 , 21 , 19 , 25 , 22 , 14 , 22 , 14 , 16 , 15 , NA , 24 , NA , NA , NA , 23 , 15 , 21 , 24 , NA , NA , NA , 18 , 21 , 18 , NA , 17 , 20 , 17 , NA)
fixed_vector <- my_vector
fixed_vector[is.na(fixed_vector)] <- mean(fixed_vector, na.rm=TRUE)
fixed_vector
fixed_vector <- replace(my_vector, is.na(my_vector), mean(my_vector, na.rm = T))
fixed_vector
#
fixed_vector <- ifelse(is.na(my_vector), mean(my_vector, na.rm = T), my_vector)
fixed_vector
#
fixed_vector <- replace(my_vector, my_vector %in% NA, mean(my_vector,na.rm = T))
fixed_vector
#
hist(df$mpg, breaks = 20, xlab = "MPG", main ="Histogram of MPG",
col = "green", cex.lab = 1.3, cex.axis = 1.3)
?hist
df  <- mtcars
df$vs  <- factor(df$vs  , labels = c("V", "S"))
df$am  <- factor(df$am  , labels = c("Auto", "Manual"))
# Histograms
hist(df$mpg, breaks = 20, xlab = "MPG", main ="Histogram of MPG",
col = "green", cex.lab = 1.3, cex.axis = 1.3)
#
plot(density(df$mpg), xlab = "MPG", main ="Density of MPG",
col = "green", cex.lab = 1.3, cex.axis = 1.3)
?plot
?density
boxplot(mpg ~ am, df, ylab = "MPG", main ="MPG and AM",
col = "green", cex.lab = 1.3, cex.axis = 1.3)
boxplot(df$mpg[df$am == "Auto"], df$mpg[df$am == "Manual"], ylab = "MPG", main ="MPG and AM",
col = "green", cex.lab = 1.3, cex.axis = 1.3)
boxplot(df$mpg[df$am == "Auto"], df$mpg[df$am == "Manual"], ylab = "MPG", main ="MPG and AM",
col = "green", cex.lab = 1.3, cex.axis = 1.3)
plot(df$mpg, df$hp, xlab = "MPG", ylab ="HP" , main ="MPG and HP", pch = 22)
install.packages(c("gtable", "visNetwork"))
?barplot
mp <- barplot(VADeaths) # default
tot <- colMeans(VADeaths)
text(mp, tot + 3, format(tot), xpd = TRUE, col = "blue")
barplot(VADeaths, beside = TRUE,
col = c("lightblue", "mistyrose", "lightcyan",
"lavender", "cornsilk"),
legend = rownames(VADeaths), ylim = c(0, 100))
title(main = "Death Rates in Virginia", font.main = 4)
hh <- t(VADeaths)[, 5:1]
mybarcol <- "gray20"
mp <- barplot(hh, beside = TRUE,
col = c("lightblue", "mistyrose",
"lightcyan", "lavender"),
legend = colnames(VADeaths), ylim = c(0,100),
main = "Death Rates in Virginia", font.main = 4,
sub = "Faked upper 2*sigma error bars", col.sub = mybarcol,
cex.names = 1.5)
segments(mp, hh, mp, hh + 2*sqrt(1000*hh/100), col = mybarcol, lwd = 1.5)
stopifnot(dim(mp) == dim(hh))  # corresponding matrices
mtext(side = 1, at = colMeans(mp), line = -2,
text = paste("Mean", formatC(colMeans(hh))), col = "red")
# Bar shading example
barplot(VADeaths, angle = 15+10*1:5, density = 20, col = "black",
legend = rownames(VADeaths))
title(main = list("Death Rates in Virginia", font = 4))
# border :
barplot(VADeaths, border = "dark blue")
# log scales (not much sense here):
barplot(tN, col = heat.colors(12), log = "y")
barplot(tN, col = gray.colors(20), log = "xy")
# args.legend
barplot(height = cbind(x = c(465, 91) / 465 * 100,
y = c(840, 200) / 840 * 100,
z = c(37, 17) / 37 * 100),
beside = FALSE,
width = c(465, 840, 37),
col = c(1, 2),
legend.text = c("A", "B"),
args.legend = list(x = "topleft"))
library(ggplot2)
ggplot(df, aes(x = mpg))+
geom_histogram(fill = "white", col = "black", binwidth = 2)+
xlab("Miles/(US) gallon")+
ylab("Count")+
ggtitle("MPG histogram")
ggplot(df, aes(x = mpg, fill = am))+
geom_dotplot()+
xlab("Miles/(US) gallon")+
ylab("Count")+
scale_fill_discrete(name="Transmission type")+
ggtitle("MPG dotplot")
ggplot(df, aes(x = mpg))+
geom_density(fill = "red")
ggplot(df, aes(x = mpg, fill = am))+
geom_density(alpha = 0.5)+
xlab("Miles/(US) gallon")+
ylab("Count")+
scale_fill_discrete(name="Transmission type")+
ggtitle("MPG density plot")
ggplot(df, aes(x = am, y = hp, fill = vs))+
geom_boxplot()+
xlab("Transmission type")+
ylab("Gross horsepower")+
scale_fill_discrete(name="Engine type")+
ggtitle("Gross horsepower and engine type")
my_plot  <- ggplot(df, aes(x = mpg, y = hp, col = vs, size = qsec))+
geom_point()
my_plot2  <- ggplot(df, aes(x = am, y = hp, fill = vs))
my_plot2 + geom_boxplot()
my_plot  <- ggplot(df, aes(x = mpg, y = hp, col = vs, size = qsec))+
geom_point()
library(ggplot2)
my_plot  <- ggplot(df, aes(x = mpg, y = hp, col = vs, size = qsec))+
geom_point()
my_plot
View(my_plot)
View(my_plot)
boxplot( airquality$Ozone ~ airquality$Month )
df <- airquality library(ggplot2) ggplot(df,aes(x=as.factor(Month), y=Ozone))+ geom_boxplot()
df <- airquality
ggplot(df,aes(x=as.factor(Month), y=Ozone))+ geom_boxplot()
mtcars$mpg <- as.factor(mtcars$mpg)
plot1 <- ggplot(mtcars, aes(x = mpg, y = disp, col = hp)) + geom_point()
plot1
ggplot(iris, aes(Sepal.Length)) + geom_histogram(fill = Species)
?iris
ggplot(iris, aes(Sepal.Length)) + geom_histogram(fill = Species)
ggplot(iris, aes(Sepal.Length)) + geom_histogram(aes(fill = Species))
ggplot(iris, aes(Sepal.Length, fill = Species)) + geom_histogram()
ggplot(iris, aes(Sepal.Length)) + geom_histogram(aes(col = Species))
ggplot(iris, aes(Sepal.Length)) + geom_histogram(fill = Species)
ggplot(iris, aes(Sepal.Length)) + geom_histogram(aes(fill = Species))
ggplot(iris, aes(Sepal.Length, fill = Species)) + geom_histogram()
ggplot(iris, aes(Sepal.Length)) + geom_histogram(aes(col = Species))
ggplot(iris, aes(Sepal.Length, col = Species)) + geom_histogram()
ggplot(iris, aes(Sepal.Length, col = Species)) + geom_histogram()
--ggplot(iris, aes(Sepal.Length)) + geom_histogram(fill = Species)
ggplot(iris, aes(Sepal.Length)) + geom_histogram(aes(fill = Species))
ggplot(iris, aes(Sepal.Length)) + geom_histogram(aes(col = Species))
ggplot(iris, aes(Sepal.Length)) + geom_histogram(aes(col = Species))
ggplot(iris, aes(Sepal.Length, col = Species)) + geom_histogram()
ggplot(iris, aes(Sepal.Length, fill = Species)) + geom_histogram()
ggplot(iris, aes(Sepal.Length, fill = Species)) + geom_histogram()
ggplot(iris, aes(Sepal.Length, col = Species)) + geom_histogram()
ggplot(iris, aes(Sepal.Length, fill = Species)) + geom_histogram()
ggplot(iris, aes(Sepal.Length)) + geom_histogram(aes(fill = Species))
ggplot(iris, aes(Sepal.Length)) + geom_histogram(fill = Species)
ggplot(iris, aes(Sepal.Length)) + geom_histogram(fill = Species)
ggplot(iris, aes(Sepal.Length)) + geom_histogram(aes(fill = Species))
ggplot(iris, aes(Sepal.Length, fill = Species)) + geom_histogram()
ggplot(iris, aes(Sepal.Length)) + geom_histogram(fill = Species)
ggplot(iris, aes(Sepal.Length)) + geom_histogram(fill = Species)
ggplot(iris, aes(Sepal.Length)) + geom_histogram(fill = Species)
ggplot(aes(Sepal.Length, Sepal.Width, col = Species)) + geom_point(iris, size = Petal.Length)
ggplot(aes(Sepal.Length, Sepal.Width, col = Species)) + geom_point(iris, size = Petal.Length)
ggplot(iris, aes(Sepal.Length, Sepal.Width, col = Species)) +
geom_point(aes(size = Petal.Length))
ggplot(iris, aes(Sepal.Length, Sepal.Width, col = Species)) + geom_point(aes(size = Petal.Length))
my_mean  <- mean(10^6 : 10^7)
save(my_mean, file = "my_mean.RData")
save(my_mean, file = "D:\OneDrive\education\R\my_mean.RData")
save(my_mean, file = "D:/OneDrive/education/R/my_mean.RData")
getwd
getwd
getwd()
setwd(D:/OneDrive/education/R/)
setwd("D:/OneDrive/education/R")
setwd("D:/OneDrive/education/R")
write.csv(df, "df.csv")
df  <- mtcars
mean_mpg  <- mean(df$mpg)
descr_df  <- describe(df[,-c(8,9)])
my_boxplot  <- ggplot(df, aes(x = factor(am), y = disp))+
geom_boxplot()+
xlab("Transmission")+
ylab("Displacement")+
ggtitle("My boxplot")
write.csv(df, "df.csv")
write.csv(descr_df, "descr_df.csv")
my_mean  <- mean(10^6 : 10^7)
save(my_mean, file = "my_mean.RData")
write.csv(descr_df, "descr_df.csv")
descr_df  <- describe(df[,-c(8,9)])
library(psych)
descr_df  <- describe(df[,-c(8,9)])
write.csv(descr_df, "descr_df.csv")
my_mean  <- mean(10^6 : 10^9)
my_mean
my_na_rm  <- function(x){
if (is.numeric(x)){
# ?shapiro.test
stat_test  <- shapiro.test(x)
if (stat_test$p.value > 0.05){
x[is.na(x)]  <- mean(x, na.rm = T)
print("NA values were replaced with mean")
} else{
x[is.na(x)]  <- median(x, na.rm = T)
print("NA values were replaced with median")
}
return(x)
} else{
print("X is not numeric")
}
}
# Инсталляция ggplot2 (предполагает наличие Интернет-соединения):
install.packages("ggplot2")
# Загрузка пакета (в приведенных ниже примерах эта команда повторяться не будет):
library(ggplot2)
# Загрузка таблицы с данными, используемыми в большинстве примеров:
dreissena <- read.delim("http://files.figshare.com/1360878/Dreissena.txt")
# Просмотр структуры таблицы dreissena:
str(dreissena)
# Преобразование переменной Month в фактор с упорядоченными уровнями:
dreissena$Month <- factor(dreissena$Month, ordered = TRUE,
levels = c("May", "July", "September"))
dreissena$Month
View(dreissena)
setwd("D:/OneDrive/education/R/Statistic_in_R_part1")
setwd("D:/OneDrive/education/R/Statistic_in_R_part1/Grants data")
#
dir(pattern = "*.csv")
grants2 <- read_data()
#
read_data  <- function(){
df  <- data.frame()
number  <<- 0
for (i in dir(pattern = "*.csv")){
temp_df  <- read.csv(i, stringsAsFactors = F)
df  <- rbind(temp_df, df)
number <<- number + 1
}
print(paste(as.character(number), "files were combined"))
return(df)
}
grants2 <- read_data()
View(read_data)
View(grants2)
filtered.sum(c(1, -2, 3, NA, NA))
filtered.sum <- function(x){
return(sum(x[which(x > 0)]))
}
filtered.sum(c(1, -2, 3, NA, NA))
as.numeric(unlist(strsplit("16.3 8.13 22.92 19.84 22.64 22.43 27.66 12.06 21.19 24.08 12.89 16.82 27.1 15.11 30.0 21.75 17.99 20.48 25.77 18.49 16.68 22.2 17.17 11.9 17.48 7.37 18.84 27.57 21.24 26.33 19.56 17.11 11.29 12.1 16.95 15.8", " ")))
as.numeric(unlist(strsplit("16.3 8.13 22.92 19.84 22.64 22.43 27.66 12.06 21.19 24.08 12.89 16.82 27.1 15.11 30.0 21.75 17.99 20.48 25.77 18.49 16.68 22.2 17.17 11.9 17.48 7.37 18.84 27.57 21.24 26.33 19.56 17.11 11.29 12.1 16.95 15.8", " ")))
remove_outliers <- function(x) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
outliers.rm(as.numeric(unlist(strsplit("16.3 8.13 22.92 19.84 22.64 22.43 27.66 12.06 21.19 24.08 12.89 16.82 27.1 15.11 30.0 21.75 17.99 20.48 25.77 18.49 16.68 22.2 17.17 11.9 17.48 7.37 18.84 27.57 21.24 26.33 19.56 17.11 11.29 12.1 16.95 15.8", " "))))
remove_outliers(as.numeric(unlist(strsplit("16.3 8.13 22.92 19.84 22.64 22.43 27.66 12.06 21.19 24.08 12.89 16.82 27.1 15.11 30.0 21.75 17.99 20.48 25.77 18.49 16.68 22.2 17.17 11.9 17.48 7.37 18.84 27.57 21.24 26.33 19.56 17.11 11.29 12.1 16.95 15.8", " "))))
df <- 1:10
outliers.rm <- function(x){
mod_x <<- c()
for(i in 1:length(x)){
q1 <- quantile(x,probs=c(0.75))
q2 <- quantile(x,probs=c(0.25))
if (x[i]<(q1+IQR(x)) & x[i]>(q2-IQR(x))) {
mod_x <<- append(mod_x, x[i])
}
}
}
outliers.rm(df)
outliers.rm(df)
outliers.rm <- function(x){
mod_x <<- c()
for(i in 1:length(x)){
q1 <- quantile(x,probs=c(0.75))
q2 <- quantile(x,probs=c(0.25))
if (x[i]<(q1+ 1.5 * IQR(x)) & x[i]>(q2-1.5 * IQR(x))) {
mod_x <<- append(mod_x, x[i])
}
}
}
return(x)
return(mod_x)
return(mod_x)
return(mod_x)
return(mod_x)
return(mod_x)
outliers.rm <- function(x){
mod_x <<- c()
for(i in 1:length(x)){
q1 <- quantile(x,probs=c(0.75))
q2 <- quantile(x,probs=c(0.25))
if (x[i]<(q1+ 1.5 * IQR(x)) & x[i]>(q2-1.5 * IQR(x))) {
mod_x <<- append(mod_x, x[i])
}
}
return(mod_x)
}

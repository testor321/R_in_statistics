text(mp, tot + 3, format(tot), xpd = TRUE, col = "blue")
barplot(VADeaths, beside = TRUE,
col = c("lightblue", "mistyrose", "lightcyan",
"lavender", "cornsilk"),
legend = rownames(VADeaths), ylim = c(0, 100))
title(main = "Death Rates in Virginia", font.main = 4)
hh <- t(VADeaths)[, 5:1]
mybarcol <- "gray20"
mp <- barplot(hh, beside = TRUE,
col = c("lightblue", "mistyrose",
"lightcyan", "lavender"),
legend = colnames(VADeaths), ylim = c(0,100),
main = "Death Rates in Virginia", font.main = 4,
sub = "Faked upper 2*sigma error bars", col.sub = mybarcol,
cex.names = 1.5)
segments(mp, hh, mp, hh + 2*sqrt(1000*hh/100), col = mybarcol, lwd = 1.5)
stopifnot(dim(mp) == dim(hh))  # corresponding matrices
mtext(side = 1, at = colMeans(mp), line = -2,
text = paste("Mean", formatC(colMeans(hh))), col = "red")
# Bar shading example
barplot(VADeaths, angle = 15+10*1:5, density = 20, col = "black",
legend = rownames(VADeaths))
title(main = list("Death Rates in Virginia", font = 4))
# border :
barplot(VADeaths, border = "dark blue")
# log scales (not much sense here):
barplot(tN, col = heat.colors(12), log = "y")
barplot(tN, col = gray.colors(20), log = "xy")
# args.legend
barplot(height = cbind(x = c(465, 91) / 465 * 100,
y = c(840, 200) / 840 * 100,
z = c(37, 17) / 37 * 100),
beside = FALSE,
width = c(465, 840, 37),
col = c(1, 2),
legend.text = c("A", "B"),
args.legend = list(x = "topleft"))
library(ggplot2)
ggplot(df, aes(x = mpg))+
geom_histogram(fill = "white", col = "black", binwidth = 2)+
xlab("Miles/(US) gallon")+
ylab("Count")+
ggtitle("MPG histogram")
ggplot(df, aes(x = mpg, fill = am))+
geom_dotplot()+
xlab("Miles/(US) gallon")+
ylab("Count")+
scale_fill_discrete(name="Transmission type")+
ggtitle("MPG dotplot")
ggplot(df, aes(x = mpg))+
geom_density(fill = "red")
ggplot(df, aes(x = mpg, fill = am))+
geom_density(alpha = 0.5)+
xlab("Miles/(US) gallon")+
ylab("Count")+
scale_fill_discrete(name="Transmission type")+
ggtitle("MPG density plot")
ggplot(df, aes(x = am, y = hp, fill = vs))+
geom_boxplot()+
xlab("Transmission type")+
ylab("Gross horsepower")+
scale_fill_discrete(name="Engine type")+
ggtitle("Gross horsepower and engine type")
my_plot  <- ggplot(df, aes(x = mpg, y = hp, col = vs, size = qsec))+
geom_point()
my_plot2  <- ggplot(df, aes(x = am, y = hp, fill = vs))
my_plot2 + geom_boxplot()
my_plot  <- ggplot(df, aes(x = mpg, y = hp, col = vs, size = qsec))+
geom_point()
library(ggplot2)
my_plot  <- ggplot(df, aes(x = mpg, y = hp, col = vs, size = qsec))+
geom_point()
my_plot
View(my_plot)
View(my_plot)
boxplot( airquality$Ozone ~ airquality$Month )
df <- airquality library(ggplot2) ggplot(df,aes(x=as.factor(Month), y=Ozone))+ geom_boxplot()
df <- airquality
ggplot(df,aes(x=as.factor(Month), y=Ozone))+ geom_boxplot()
mtcars$mpg <- as.factor(mtcars$mpg)
plot1 <- ggplot(mtcars, aes(x = mpg, y = disp, col = hp)) + geom_point()
plot1
ggplot(iris, aes(Sepal.Length)) + geom_histogram(fill = Species)
?iris
ggplot(iris, aes(Sepal.Length)) + geom_histogram(fill = Species)
ggplot(iris, aes(Sepal.Length)) + geom_histogram(aes(fill = Species))
ggplot(iris, aes(Sepal.Length, fill = Species)) + geom_histogram()
ggplot(iris, aes(Sepal.Length)) + geom_histogram(aes(col = Species))
ggplot(iris, aes(Sepal.Length)) + geom_histogram(fill = Species)
ggplot(iris, aes(Sepal.Length)) + geom_histogram(aes(fill = Species))
ggplot(iris, aes(Sepal.Length, fill = Species)) + geom_histogram()
ggplot(iris, aes(Sepal.Length)) + geom_histogram(aes(col = Species))
ggplot(iris, aes(Sepal.Length, col = Species)) + geom_histogram()
ggplot(iris, aes(Sepal.Length, col = Species)) + geom_histogram()
--ggplot(iris, aes(Sepal.Length)) + geom_histogram(fill = Species)
ggplot(iris, aes(Sepal.Length)) + geom_histogram(aes(fill = Species))
ggplot(iris, aes(Sepal.Length)) + geom_histogram(aes(col = Species))
ggplot(iris, aes(Sepal.Length)) + geom_histogram(aes(col = Species))
ggplot(iris, aes(Sepal.Length, col = Species)) + geom_histogram()
ggplot(iris, aes(Sepal.Length, fill = Species)) + geom_histogram()
ggplot(iris, aes(Sepal.Length, fill = Species)) + geom_histogram()
ggplot(iris, aes(Sepal.Length, col = Species)) + geom_histogram()
ggplot(iris, aes(Sepal.Length, fill = Species)) + geom_histogram()
ggplot(iris, aes(Sepal.Length)) + geom_histogram(aes(fill = Species))
ggplot(iris, aes(Sepal.Length)) + geom_histogram(fill = Species)
ggplot(iris, aes(Sepal.Length)) + geom_histogram(fill = Species)
ggplot(iris, aes(Sepal.Length)) + geom_histogram(aes(fill = Species))
ggplot(iris, aes(Sepal.Length, fill = Species)) + geom_histogram()
ggplot(iris, aes(Sepal.Length)) + geom_histogram(fill = Species)
ggplot(iris, aes(Sepal.Length)) + geom_histogram(fill = Species)
ggplot(iris, aes(Sepal.Length)) + geom_histogram(fill = Species)
ggplot(aes(Sepal.Length, Sepal.Width, col = Species)) + geom_point(iris, size = Petal.Length)
ggplot(aes(Sepal.Length, Sepal.Width, col = Species)) + geom_point(iris, size = Petal.Length)
ggplot(iris, aes(Sepal.Length, Sepal.Width, col = Species)) +
geom_point(aes(size = Petal.Length))
ggplot(iris, aes(Sepal.Length, Sepal.Width, col = Species)) + geom_point(aes(size = Petal.Length))
my_mean  <- mean(10^6 : 10^7)
save(my_mean, file = "my_mean.RData")
save(my_mean, file = "D:\OneDrive\education\R\my_mean.RData")
save(my_mean, file = "D:/OneDrive/education/R/my_mean.RData")
getwd
getwd
getwd()
setwd(D:/OneDrive/education/R/)
setwd("D:/OneDrive/education/R")
setwd("D:/OneDrive/education/R")
write.csv(df, "df.csv")
df  <- mtcars
mean_mpg  <- mean(df$mpg)
descr_df  <- describe(df[,-c(8,9)])
my_boxplot  <- ggplot(df, aes(x = factor(am), y = disp))+
geom_boxplot()+
xlab("Transmission")+
ylab("Displacement")+
ggtitle("My boxplot")
write.csv(df, "df.csv")
write.csv(descr_df, "descr_df.csv")
my_mean  <- mean(10^6 : 10^7)
save(my_mean, file = "my_mean.RData")
write.csv(descr_df, "descr_df.csv")
descr_df  <- describe(df[,-c(8,9)])
library(psych)
descr_df  <- describe(df[,-c(8,9)])
write.csv(descr_df, "descr_df.csv")
my_mean  <- mean(10^6 : 10^9)
my_mean
my_na_rm  <- function(x){
if (is.numeric(x)){
# ?shapiro.test
stat_test  <- shapiro.test(x)
if (stat_test$p.value > 0.05){
x[is.na(x)]  <- mean(x, na.rm = T)
print("NA values were replaced with mean")
} else{
x[is.na(x)]  <- median(x, na.rm = T)
print("NA values were replaced with median")
}
return(x)
} else{
print("X is not numeric")
}
}
# Инсталляция ggplot2 (предполагает наличие Интернет-соединения):
install.packages("ggplot2")
# Загрузка пакета (в приведенных ниже примерах эта команда повторяться не будет):
library(ggplot2)
# Загрузка таблицы с данными, используемыми в большинстве примеров:
dreissena <- read.delim("http://files.figshare.com/1360878/Dreissena.txt")
# Просмотр структуры таблицы dreissena:
str(dreissena)
# Преобразование переменной Month в фактор с упорядоченными уровнями:
dreissena$Month <- factor(dreissena$Month, ordered = TRUE,
levels = c("May", "July", "September"))
dreissena$Month
View(dreissena)
# ------------------------------- Рисунок 2.1 ----------------------------------
#
qplot(x = Length, y = Infection, data = dreissena)
library(ggplot2)
?qplot
# ------------------------------- Рисунок 2.1 ----------------------------------
#
qplot(x = Length, y = Infection, data = dreissena)
# ------------------------------- Рисунок 2.2 ----------------------------------
qplot(x = log(Length),
y = log(Infection + 1), data = dreissena)
# ------------------------------- Рисунок 2.3 ----------------------------------
qplot(log(Length), log(Infection + 1), data = dreissena, colour = Month)
qplot(log(Length), log(Infection + 1), data = dreissena, shape = Lake)
# ------------------------------- Рисунок 2.4 ----------------------------------
qplot(Length, Infection, alpha = I(1/2), data = dreissena)
qplot(Length, Infection, alpha = I(1/8), data = dreissena)
qplot(Length, Infection, alpha = I(1/8), data = dreissena)
# ------------------------------- Рисунок 2.5 ----------------------------------
qplot(log(Length), log(Infection + 1), data = dreissena,
size = Day, alpha = I(0.25), colour = I("magenta"))
library(remotes)
install_version("dplyr", version="0.5.0")
install_version("dplyr", version="0.5.0")
# no pec
# Here is how you compute the sum for the first 20 integers
20*(20+1)/2
# However, we can define a variable to use the formula for other values of n
n <- 20
n*(n+1)/2
n <- 25
n*(n+1)/2
# Below, write code to calculate the sum of the first 100 integers
# Here is how you compute the sum for the first 20 integers
20*(20+1)/2
# However, we can define a variable to use the formula for other values of n
n <- 20
n*(n+1)/2
n <- 25
n*(n+1)/2
# Below, write code to calculate the sum of the first 100 integers
n <- 100
n*(n+1)/2
test_error()
# no pec
# no pec
# no pec
# Here is how you compute the sum for the first 20 integers
20*(20+1)/2
# However, we can define a variable to use the formula for other values of n
n <- 20
n*(n+1)/2
n <- 25
n*(n+1)/2
# Below, write code to calculate the sum of the first 100 integers
# Here is how you compute the sum for the first 20 integers
20*(20+1)/2
# However, we can define a variable to use the formula for other values of n
n <- 20
n*(n+1)/2
n <- 25
n*(n+1)/2
# Below, write code to calculate the sum of the first 100 integers
n <- 100
n*(n+1)/2
test_error()
# Chunk 1
# no pec
# Chunk 2
# Here is how you compute the sum for the first 20 integers
20*(20+1)/2
# However, we can define a variable to use the formula for other values of n
n <- 20
n*(n+1)/2
n <- 25
n*(n+1)/2
# Below, write code to calculate the sum of the first 100 integers
# Chunk 3
# Here is how you compute the sum for the first 20 integers
20*(20+1)/2
# However, we can define a variable to use the formula for other values of n
n <- 20
n*(n+1)/2
n <- 25
n*(n+1)/2
# Below, write code to calculate the sum of the first 100 integers
n <- 100
n*(n+1)/2
# Chunk 4
test_error()
test_object("n", incorrect_msg = "Make sure that you use `n` as your variable name and that you have assigned the correct value to `n`.")
test_output_contains("5050", incorrect_msg = "You are not providing a formula that gives the correct answer. Look at the example code.")
test_student_typed("n*(n+1)/2", times = 3, not_typed_msg = "Make sure you type the equation. Look at the example code. And don't erase the example code.")
success_msg("Good job! Let`s apply this to another question.")
# Chunk 5
# no pec
# Chunk 6
# Below, write code to calculate the sum of the first 1000 integers
# Chunk 7
# Below, write code to calculate the sum of the first 1000 integers
n <- 1000
n*(n+1)/2
# Chunk 8
test_object("n", incorrect_msg = "Make sure that you use `n` as your variable name and that you have assigned the correct value to `n`.")
test_student_typed("n*(n+1)/2", times = 1, not_typed_msg = "Make sure you define the equation.")
success_msg("Good job! Let`s get to work on another question!")
# Chunk 10
# no pec
# Chunk 11
msg1 = "Try again! Read the choices carefully. Try again."
msg2 = "Well done. Proceed to the next exercise."
msg3 = "There's no specification of 1 to 1000 for sum. Try again."
msg4 = "Read the help file for sum by typing `?sum` in the R console."
test_mc(correct = 2, feedback_msgs = c(msg1,msg2,msg3,msg4))
# Chunk 12
# no pec
# Chunk 1
# no pec
# Chunk 2
# Here is how you compute the sum for the first 20 integers
20*(20+1)/2
# However, we can define a variable to use the formula for other values of n
n <- 20
n*(n+1)/2
n <- 25
n*(n+1)/2
# Below, write code to calculate the sum of the first 100 integers
# Chunk 3
# Here is how you compute the sum for the first 20 integers
20*(20+1)/2
# However, we can define a variable to use the formula for other values of n
n <- 20
n*(n+1)/2
n <- 25
n*(n+1)/2
# Below, write code to calculate the sum of the first 100 integers
n <- 100
n*(n+1)/2
# Chunk 4
test_error()
test_object("n", incorrect_msg = "Make sure that you use `n` as your variable name and that you have assigned the correct value to `n`.")
test_output_contains("5050", incorrect_msg = "You are not providing a formula that gives the correct answer. Look at the example code.")
test_student_typed("n*(n+1)/2", times = 3, not_typed_msg = "Make sure you type the equation. Look at the example code. And don't erase the example code.")
success_msg("Good job! Let`s apply this to another question.")
# Chunk 5
# no pec
# Chunk 6
# Below, write code to calculate the sum of the first 1000 integers
# Chunk 7
# Below, write code to calculate the sum of the first 1000 integers
n <- 1000
n*(n+1)/2
# Chunk 8
test_object("n", incorrect_msg = "Make sure that you use `n` as your variable name and that you have assigned the correct value to `n`.")
test_student_typed("n*(n+1)/2", times = 1, not_typed_msg = "Make sure you define the equation.")
success_msg("Good job! Let`s get to work on another question!")
# Chunk 10
# no pec
# Chunk 11
msg1 = "Try again! Read the choices carefully. Try again."
msg2 = "Well done. Proceed to the next exercise."
msg3 = "There's no specification of 1 to 1000 for sum. Try again."
msg4 = "Read the help file for sum by typing `?sum` in the R console."
test_mc(correct = 2, feedback_msgs = c(msg1,msg2,msg3,msg4))
# Chunk 12
# no pec
# Chunk 1
# no pec
# Chunk 2
# Here is how you compute the sum for the first 20 integers
20*(20+1)/2
# However, we can define a variable to use the formula for other values of n
n <- 20
n*(n+1)/2
n <- 25
n*(n+1)/2
# Below, write code to calculate the sum of the first 100 integers
# Chunk 3
# Here is how you compute the sum for the first 20 integers
20*(20+1)/2
# However, we can define a variable to use the formula for other values of n
n <- 20
n*(n+1)/2
n <- 25
n*(n+1)/2
# Below, write code to calculate the sum of the first 100 integers
n <- 100
n*(n+1)/2
# Chunk 4
test_error()
test_object("n", incorrect_msg = "Make sure that you use `n` as your variable name and that you have assigned the correct value to `n`.")
test_output_contains("5050", incorrect_msg = "You are not providing a formula that gives the correct answer. Look at the example code.")
test_student_typed("n*(n+1)/2", times = 3, not_typed_msg = "Make sure you type the equation. Look at the example code. And don't erase the example code.")
success_msg("Good job! Let`s apply this to another question.")
# Chunk 5
# no pec
# Chunk 6
# Below, write code to calculate the sum of the first 1000 integers
# Chunk 7
# Below, write code to calculate the sum of the first 1000 integers
n <- 1000
n*(n+1)/2
# Chunk 8
test_object("n", incorrect_msg = "Make sure that you use `n` as your variable name and that you have assigned the correct value to `n`.")
test_student_typed("n*(n+1)/2", times = 1, not_typed_msg = "Make sure you define the equation.")
success_msg("Good job! Let`s get to work on another question!")
# Chunk 10
# no pec
# Chunk 11
msg1 = "Try again! Read the choices carefully. Try again."
msg2 = "Well done. Proceed to the next exercise."
msg3 = "There's no specification of 1 to 1000 for sum. Try again."
msg4 = "Read the help file for sum by typing `?sum` in the R console."
test_mc(correct = 2, feedback_msgs = c(msg1,msg2,msg3,msg4))
# Chunk 12
# no pec
# Chunk 1
# no pec
# Chunk 2
# Here is how you compute the sum for the first 20 integers
20*(20+1)/2
# However, we can define a variable to use the formula for other values of n
n <- 20
n*(n+1)/2
n <- 25
n*(n+1)/2
# Below, write code to calculate the sum of the first 100 integers
# Chunk 3
# Here is how you compute the sum for the first 20 integers
20*(20+1)/2
# However, we can define a variable to use the formula for other values of n
n <- 20
n*(n+1)/2
n <- 25
n*(n+1)/2
# Below, write code to calculate the sum of the first 100 integers
n <- 100
n*(n+1)/2
# Chunk 4
test_error()
test_object("n", incorrect_msg = "Make sure that you use `n` as your variable name and that you have assigned the correct value to `n`.")
test_output_contains("5050", incorrect_msg = "You are not providing a formula that gives the correct answer. Look at the example code.")
test_student_typed("n*(n+1)/2", times = 3, not_typed_msg = "Make sure you type the equation. Look at the example code. And don't erase the example code.")
success_msg("Good job! Let`s apply this to another question.")
# Chunk 5
# no pec
# Chunk 6
# Below, write code to calculate the sum of the first 1000 integers
# Chunk 7
# Below, write code to calculate the sum of the first 1000 integers
n <- 1000
n*(n+1)/2
# Chunk 8
test_object("n", incorrect_msg = "Make sure that you use `n` as your variable name and that you have assigned the correct value to `n`.")
test_student_typed("n*(n+1)/2", times = 1, not_typed_msg = "Make sure you define the equation.")
success_msg("Good job! Let`s get to work on another question!")
# Chunk 10
# no pec
# Chunk 11
msg1 = "Try again! Read the choices carefully. Try again."
msg2 = "Well done. Proceed to the next exercise."
msg3 = "There's no specification of 1 to 1000 for sum. Try again."
msg4 = "Read the help file for sum by typing `?sum` in the R console."
test_mc(correct = 2, feedback_msgs = c(msg1,msg2,msg3,msg4))
# no pec
# Chunk 1
# no pec
# Chunk 2
# Here is how you compute the sum for the first 20 integers
20*(20+1)/2
# However, we can define a variable to use the formula for other values of n
n <- 20
n*(n+1)/2
n <- 25
n*(n+1)/2
# Below, write code to calculate the sum of the first 100 integers
# Chunk 3
# Here is how you compute the sum for the first 20 integers
20*(20+1)/2
# However, we can define a variable to use the formula for other values of n
n <- 20
n*(n+1)/2
n <- 25
n*(n+1)/2
# Below, write code to calculate the sum of the first 100 integers
n <- 100
n*(n+1)/2
# Chunk 4
test_error()
test_object("n", incorrect_msg = "Make sure that you use `n` as your variable name and that you have assigned the correct value to `n`.")
test_output_contains("5050", incorrect_msg = "You are not providing a formula that gives the correct answer. Look at the example code.")
test_student_typed("n*(n+1)/2", times = 3, not_typed_msg = "Make sure you type the equation. Look at the example code. And don't erase the example code.")
success_msg("Good job! Let`s apply this to another question.")
# Chunk 5
# no pec
# Chunk 6
# Below, write code to calculate the sum of the first 1000 integers
# Chunk 7
# Below, write code to calculate the sum of the first 1000 integers
n <- 1000
n*(n+1)/2
# Chunk 8
test_object("n", incorrect_msg = "Make sure that you use `n` as your variable name and that you have assigned the correct value to `n`.")
test_student_typed("n*(n+1)/2", times = 1, not_typed_msg = "Make sure you define the equation.")
success_msg("Good job! Let`s get to work on another question!")
# Chunk 10
# no pec
# Chunk 11
msg1 = "Try again! Read the choices carefully. Try again."
msg2 = "Well done. Proceed to the next exercise."
msg3 = "There's no specification of 1 to 1000 for sum. Try again."
msg4 = "Read the help file for sum by typing `?sum` in the R console."
test_mc(correct = 2, feedback_msgs = c(msg1,msg2,msg3,msg4))
# Chunk 12
# no pec
# Chunk 13
# log to the base 2
log2(16)
# sqrt of the log to the base 2 of 16:
sqrt(log2(16))
# Compute log to the base 10 (log10) of the sqrt of 100. Do not use variables.
# Chunk 14
# log to the base 2
log2(16)
# sqrt of the log to the base 2 of 16:
sqrt(log2(16))
# Compute log to the base 10 (log10) of the sqrt of 100. Do not use variables.
log10(sqrt(100))
# Chunk 15
test_error()
test_student_typed (c("log10(sqrt(100))", "log(sqrt(100), base=10)"), times = 1, not_typed_msg = "Make sure you use the right base for the log and put the sqrt function in parenthesis. Remember not to use variables.")
success_msg("Very good!")
# Chunk 16
# no pec
install.packages("dslabs")
install.packages(c("checkmate", "fs", "IRkernel", "processx", "repr", "sys"))
install.packages(c("digest", "dslabs", "evaluate", "knitr", "pillar", "repr", "rmarkdown", "tinytex", "xfun"))
